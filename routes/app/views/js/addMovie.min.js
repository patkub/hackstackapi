"use strict";

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

$(function () {
  window.hackstack = window.hackstack || {};

  (function (hackstack) {
    var navbar = new HackStackNavBar("addMovie");
    var footer = new HackStackFooter(); // render the navbar and footer

    $("#navbar").append(navbar.render());
    $("#footer").append(footer.render()); // remember current number of actors

    var numActors = 0;
    $("#imdbID").tooltip({
      trigger: "focus",
      title: "Link to movie on imdb.com",
      placement: "bottom"
    });
    /**
     * Automatically fill out the form using OMDb API
     */

    $("#imdbID").on("input", function (e) {
      // clear movie search
      $("#movieSearch").val("");
      removeAllActors(); // extract imdb id, supported formats:
      // 1) https://www.imdb.com/title/tt1502397/
      // 2) tt1502397

      var imdb_id = $("#imdbID").val().match(/tt\d+/); // https://www.omdbapi.com/?apikey=[yourkey]&

      var omdb_url = "https://www.omdbapi.com/?apikey={0}&i={1}".format(hackstack.API_KEYS.OMDB, imdb_id);
      $.getJSON(omdb_url, function (data) {
        return fillFormData(data);
      });
    });
    /**
     * Movie auto-complete code is adapted from: https://jsfiddle.net/yassarikhan786/0kcpqeg5/
     */

    $("#movieSearch").on("input", function () {
      // clear imdb id
      $("#imdbID").val("");
      removeAllActors();
      $("#movieSearch").autocomplete({
        source: function source(request, response) {
          // replace spaces with a '+'
          var search = request.term.replace(/\s/g, "+");
          return $.ajax({
            // https://www.omdbapi.com/?apikey=[yourkey]&
            url: "https://www.omdbapi.com/?apikey={0}&s={1}&type=movie&r=json".format(hackstack.API_KEYS.OMDB, search),
            dataType: "json",
            success: function success(data) {
              var results = [];
              var list = data.Search;

              if (list != undefined) {
                // we only care about the imdbID, so we can use it to query all the data we need
                results = $.map(list, function (v, i) {
                  return {
                    label: v.Title + " (" + v.Year + ")",
                    value: v.imdbID
                  };
                });
              } else results = undefined;

              response(results);
            }
          });
        }
      });
    });
    $("#movieSearch").on("autocompleteselect", function (_, ui) {
      var imdbID = ui.item.value; // https://www.omdbapi.com/?apikey=[yourkey]&

      var omdb_url = "https://www.omdbapi.com/?apikey={0}&i={1}".format(hackstack.API_KEYS.OMDB, imdbID);
      $.getJSON(omdb_url, function (data) {
        return fillFormData(data);
      });
    });
    /**
     * Adding and removing movie actors
     */

    $("#addActor").on("click", function (e) {
      return addActorListener(e);
    });
    $("#removeActor").on("click", function (e) {
      return removeLastActorListener(e);
    });
    $("#removeAllActors").on("click", function (e) {
      return removeAllActorsListener(e);
    });

    function addActorListener(e) {
      e.preventDefault();
      addActor("", "");
    }

    function removeLastActorListener(e) {
      e.preventDefault();
      $("#actors").children().last().remove();
      if (numActors > 0) numActors--;
    }

    function removeAllActorsListener(e) {
      e.preventDefault();
      removeAllActors();
    }

    function addActor(name, picture) {
      numActors++;
      $("#actors").append($(["<div class='form-group'>", "<label for='inputActorName{0}'>Actor {1}</label>".format(numActors, numActors), "<input", "  id='inputActorName{0}'".format(numActors), "  type='text'", "  class='inputActorName form-control'", "  placeholder='actor&#39;s name'", "  value='{0}'".format(name), "  required", "/>", "<input", "  id='inputActorPicture{0}'".format(numActors), "  type='text'", "  class='inputActorPicture form-control'", "  placeholder='actor&#39;s picture'", "  value='{0}'".format(picture), "  required", "/>", "</div>"].join("\n")));
    }

    function removeAllActors() {
      numActors = 0;
      $("#actors").children().remove();
    }
    /**
     * Fill the add movie form with data
     * @param {Object} data movie data from OMDb API
     */


    function fillFormData(data) {
      $("#inputTitle").val(data.Title);
      $("#inputYear").val(data.Year);
      $("#inputGenre").val(data.Genre);
      $("#inputDesc").val(data.Plot);
      $("#inputContentRating").val(data.Rated);

      if (data.Poster !== "N/A") {
        $("#inputImagePath").val(data.Poster);
      }

      $("#inputRuntime").val(data.Runtime.match(/\d+/)); // use data.imdbID to get actors

      var credits_url = "https://api.themoviedb.org/3/movie/{0}/credits?api_key={1}".format(data.imdbID, hackstack.API_KEYS.TMDB);
      $.getJSON(credits_url, function (data) {
        // get only the first 5 actors that have a profile image
        var actors = data.cast.filter(function (a) {
          return a.profile_path;
        }).slice(0, 5); // add actors to form

        var _iterator = _createForOfIteratorHelper(actors),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var actor = _step.value;
            addActor(actor.name, "https://image.tmdb.org/t/p/w200" + actor.profile_path);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    }
    /**
     * Add the new movie
     */


    $("#addNewMovie").submit(function (e) {
      e.preventDefault(); // get actors from form

      var actorNames = $(".inputActorName").map(function () {
        return $(this).val();
      }).get();
      var actorPictures = $(".inputActorPicture").map(function () {
        return $(this).val();
      }).get(); // list of actors

      var actors = [];
      $(actorNames).each(function (i, name) {
        var new_actor = {
          name: name,
          imagePath: actorPictures[i]
        };
        actors.push(new_actor);
      });
      var data = {
        title: $("#inputTitle").val(),
        year: $("#inputYear").val(),
        genre: $("#inputGenre").val(),
        description: $("#inputDesc").val(),
        rating: $("#inputContentRating").val(),
        imagePath: $("#inputImagePath").val(),
        runtime: $("#inputRuntime").val(),

        /**
         * @param {Object[]} actors movie actors
         * @param {string} actors[].name - The name of an actor
         * @param {string} actors[].imagePath - The profile picture of an actor
         */
        actors: actors
      };
      $.ajax({
        type: "POST",
        url: hackstack.API_SERVER + "movies/add",
        contentType: "application/json; charset=utf-8",
        data: JSON.stringify(data)
      }).done(function (msg) {
        // successfully added
        hackstack.alertSuccess("<strong>Movie added successfully!</strong>");
      }).fail(function (xhr, textStatus, errorThrown) {
        // failed to add
        hackstack.alertDanger("<strong>Oh no! An error occurred trying to add the movie.</strong>");
      }); // disable default browser form submit action

      return false;
    });
  })(window.hackstack);
});
